package other.O006.answer;

import java.util.HashMap;
import java.util.Map;

public class A1 {
    public static void main(String[] args) {
        String pi = "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342113" +
                "8446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334366" +
                "91456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917151" +
                "2046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956739" +
                "1298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676622" +
                "577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196" +
                "605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352683" +
                "533208381420617177669147303";

        Map<String, Integer> counts = new HashMap<>(); // 각 숫자의 출현 횟수를 저장할 맵
        String maxNum = ""; // 가장 많이 출현한 숫자
        int maxCount = 0; // 가장 많이 출현한 횟수

        // 모든 2자리 숫자에 대해
        for (int i = 0; i < pi.length() - 1; i++) {
            String num = pi.substring(i, i + 2); // 2자리 숫자 추출
            counts.put(num, counts.getOrDefault(num, 0) + 1); // 출현 횟수 증가
            // 만약 현재 숫자의 출현 횟수가 최대 출현 횟수보다 크다면 최대값 업데이트
            if (counts.get(num) > maxCount) {
                maxCount = counts.get(num);
                maxNum = num;
            }
        }
        // 결과 출력
        System.out.println("The 2-digit number that appears the most: " + maxNum);
    }
}
